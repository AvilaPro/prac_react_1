1. Que es react.js
2. Instala Herramientas.
  En la Chrome web store busca: React Developer Tools.
3. Ve a la documentacion oficial de React.js
  https://es.reactjs.org/docs/getting-started.html
4. Para iniciar:
  Vamos a Create React App 
  Como vemos en la documentacion vamos a copiar en nuestra Terminal:
    npx create-react-app discipulados
  En nuestro caso a aplicacion se va a llamar "discipulados"
  Esperamos a que cargue todos los recursos necesarios para la arquitectura de nuestra aplicacion.
5. React DOM
  Para nuestro caso eliminamos dentro de src a los archivos llamados App
  Dentro de nuestro archivo index.js mostraremos como ejemplo primero como es que antes haciamos para crear elementos en javascript y como los insertabamos en el HTML.
    //Forma antigua de generar elementos
    const element = document.createElement('h1')
    element.innerText = 'Hello React'
    const container = document.getElementById('root')
    container.appendChild(element)
  Ahora como se va a empezar a utilizar en React
    import React from 'react'
    import ReactDOM from 'react-dom'

    const element = <h1>Hello React</h1>
    const container = document.getElementById('root')

    ReactDOM.render(__QUE__, __DONDE__)
  Aqui es donde vamos a empezar ReactDOM que tienes varios metodos entre ellos render (recibe dos parametros), que en este caso sera usado para ver QUE va a modificar y DONDE lo va a hacer.
  Note ademas que como es acostumbrado cuando queremos crear un elemento primero instanciamos la creacion y luego con innerText le agregamos el contenido de dicho elemento. Pero:
    const element = <h1>Hello React</h1>
  Aqui se hace todo en la misma sentencia. Esto es gracias a:
    JSX
6. JSX
  Esta curiosa sintaxis de etiquetas no es ni un string ni HTML.

  Se llama JSX, y es una extensión de la sintaxis de JavaScript. Recomendamos usarlo con React para describir cómo debería ser la interfaz de usuario. JSX puede recordarte a un lenguaje de plantillas, pero viene con todo el poder de JavaScript.

  JSX produce “elementos” de React.

  MUY IMPORTANTE:
    Para poder usar JSX debes incorporar React porque de lo contrario no podras usarlo
  Ahora vamos a ver como estamos usando JSX en el proyecto y como esto nos ayuda en el desarrollo:
    const name = 'Eduardo'
    const user = {
      firstName : 'Eduardo',
      lastName : 'Mejias',
      avatar : 'https://firebasestorage.googleapis.com/v0/b/discipulados-react.appspot.com/o/icon_church_128px.png?alt=media&token=8cf27fb0-066a-4d4e-b95d-b2a48f52e50f'
    }
    function getName(user){
      return `${user.firstName} ${user.lastName}`;
    }
    function getGreeting(user){
      if(user){
          return <h1>Hello {getName(user)} </h1>
      }
      return <h1>Hello Extraño XD</h1>
    }
    //const element = <h1>Hello {getName(user)} </h1>
    //const element = <div>{getGreeting(user)} </div>
    //const element = <img src={user.avatar}  />
    const element = (
      <div>
        <h1>{getGreeting(user)} </h1>
        <img src={user.avatar}  />
      </div>
    )
    const container = document.getElementById('root')
    ReactDOM.render(element, container)
  Como podemos notar creamos un objeto de JS llamado user que contiene los nombres y el avatar de un "usuario". Ahora bien como podemos hacer uso de ese objeto y usar en  la vista de nuestra app. Pues aqui nos hemos creado un par de funciones. Una de ellas getName(user) ella accede a los atributos de los nombres del objeto usuario y nos lo devuelve en el llamado que le hacemos.
  Tambien tenemos otra funcion llamada getGreeting(user) y no es mas que una funcion que valida si tiene un parametro que se le este pasando pues nos mostrara una informacion y sino pues nos mostrara otra informacion. Por ultimo tenemos 4 veces creado la constante "element" y con ellas hacemos uso de diversas formas en que podemos cargar informacion de objetos de JS dentro de ella para luego ser agregada a ota constante llamada "container" que sera quien contenga el elemento que estamos creando.
  Para saber mas de JSX podemos ir a la documentacion oficial en:
    https://es.reactjs.org/docs/introducing-jsx.html#gatsby-focus-wrapper
7.Repositorio del proyecto
  En mi caso esta alojado en mi repositorio remoto de GitHub:
    https://github.com/AvilaPro/prac_react_1.git
  Cada capitulo estara guardado con una confirmacion
  Si descargas o "clonas" este repositorio en una computadora distinta a donde se realizo el proyecyo original, pues una vez instalado o "clonado" deberas abrir tu terminal y ejecutar:
    npm i
  para que se instalen las dependencias que hagan falta.
8.Componentes y propiedades
  En la documentacion:
    https://es.reactjs.org/docs/components-and-props.html
  Podemos ver los conceptos generales del mismo.
  Necesario saber que es un componente y segundo como contruir un componente. Los componentes son como las funciones de JS y esto va a devolver elementos que describen lo que debe aparecer en pantalla. 
    Un Elemento es a un Componente como un Objeto es a una Clase
  Es indispensable poder identificar que es un componente.
  Dos cosas son importantes en esta identificacion:
    1. Que elementos ser repiten en la interfaz.
    2. Que elemento cumplen una funcion en especifico.
  Practica de identificacion de elementos:
    Veamos el sitio de Netflix
    Identifiquemos algunos elementos que se repiten
    -En el nav se repiten los botones que determinan lo que se quiere ver como Series, Pelicula, entre otros. Se le puede llamar componente link.
    -Hay otro componente que es el titulo de una seccion.
    -Cada pelicula o serie es un componente que se repite.
    Elementos que NO se repiten:
    -El logo de netflix que redirige al home del sitio
    -El boton de 'search' que despliega el input para que se pueda escribir lo que se desea buscar.
    -El boton de 'notificaciones'
    -El boton que contiene el avatar del usuario y una flecha que indica el mostrar mas opciones del perfil y configuracion del usuario
  Existen varios tipos de componentes, unos son funcionales y otros son de clase.
9. Primer Componente
  Para React se considera una buena practica que cada componente "viva" en su propio archivo. Para ello se les crea una carpeta. En nuestro caso dentro de src/ creamos una carpeta llamada components/. Creamos un archivo para el componente que llamaremos Card.
  Primero para crear nuestros componentes debemos importar la clase de react dentro del mismo para que pueda funcionar como se desea:
    import React from 'react'
  Segundo creamos la respuesta que nuestro componente va a hacer, creamos una clase que extiende de React.Component y seguido la funcion render que es lo que dicho componente va a devolver:
    class Card extends React.Component {
      render(){
        return(
          <div>
            <div>
              <img src={discipuladoImg} />
            </div>
            <div>
              <h1>Guias Practicas</h1>
              <p>Aprende las practicas fundamentales del discipulo</p>
            </div>
          </div>
        )
      }
    }
  Por ultimo debemos exportar la respuesta para que este disponible para todo nuestro proyecto y pueda ser utilizado cuando lo necesitemos:
    export default Card
  Ademas la inclusion de la imagen que queremos en la card lo hacemos de la siguiente manera:
    import discipuladoImg from '../images/mariposa1.png'
  Por supuesto que primeramente debemos crear la carpeta images en src/ para luego indexarla el la propiedad src de nuestro elemento img.
10. Agregando CSS a los componentes
  Una de las formas que podemos usar para agregar estilos css a nuestros componentes es creando aparte un archivo de css (como normalmente hacemos en desarrollo standard front-end, alli declaramos las clases a usar y luego las usamos asignando esas propedades a los elementos de html). Para ello podemos crear una carpeta dentro de components/ llamada styles/ y alli crear cada tipos de estilos de los componenetes. Para ayudarnos en la lectura de los archivos conviene llamar cada hoja de estilo tal como se llama el Componente. En nuesto caso le hemos llamado Card.
    .card {
      border: none;
      border-radius: 8px;
      background: url('../../images/circles.png') no-repeat, linear-gradient(to right, #A74CF2, #617BFB);
    }
    .Discipulos-User-Info {
      margin-top: 50px;
      margin-bottom: 50px;
      margin-left: 200px;
    }
    .Discipulos-Card {
      max-height: 140px;
      max-width: 520px;
    }
    .Discipulos-Card-Info {
      padding-left: 0;
      padding-right: 75px;
    }
    .Discipulos-Card-Info h1{
      font-size: 23px;
      color: white;
    }
    .Discipulos-Card-Info p{
      font-size: 11px;
      color: white;
    }
    .Discipulos-Add {
      display: block;
      margin-left: auto;
      margin-right: auto;
      margin-top: 100px;
      margin-bottom: 80px;
      height: 60px;
    }
  NOTA: Ahora podemos usar estas clases en nuestros componentes de react. Pero hay un detalle muy importante!!! no podemos dentro de JavaScript usar la palabra "class" para asignar a etiquetas de HTML una clase, ya que en JavaScript la palabra class es una palabra reservada para crear o invocar o hacer referencia a una clase. Por ello nosotros podemos usar en JavaScript la palabra "className"
  NOTA: Para implementar Bootstrap en nuestro proyecto podemos instalarlo con el uso de nom a traves del terminal:
    npm i bootstrap
  Y luego para tenerlo disponibles en cualquier componente dentro de nuestro index, pues lo importamos dentro de nuestro index.js de la siguiente manera:
    import 'bootstrap/dist/css/bootstrap.css'
11. Las props
  Como vemos hasta ahora nuestro Componente creado llamado Card tiene mucho "hard code" es decir el contenido dentro de dicho Componente lo hemos ingresado manualmente a traves del codigo y no haciendo referencia de otra parte para hacerlo reutilizable, como mas porbable podria ser por ejemplo, la respuesta json de una api que podamos indexar dentro del Componente o recibir objetos de una base de datos e ingresar la informacion necesaria dentro del componente.
  Por ello existe "props"
  Los parametros que podemos pasarles a nuestros componentes se les denomina "props" y vamos a ver como enviarle propiedades a nuestros componentes.
  En nuestro caso, las card pueden recibir como propiedad lo siguiente:
    combinacion de colores del background
    texto de las etiquetas
  Ahora al caso.
  Primero que todo en nuestro componente que hemos llamado Card vamos a ir cambiando los estios de la misma. Primero que todo en Card.css la propiedad .card el background lo comentamos y lo copiamos en la propiedad style de nuestro primer div de la Card en el archivo Card.js:
    <div className="card mx-auto Discipulos-Card" 
      style={{ 
        backgroundImage: `url(${circlesImg}), linear-gradient(to right, #A74CF2, #617BFB)`,
      }} 
    >
  Esta inclusion se le llama "estilos en linea". Como vemos aqui ecribimos la propiedad como backgroundImage.
  Ademas "importamos" dentro del archivo Clase.js la carpeta que contiene la iamgen de los circulos:
    import circlesImg from '../images/circles.png'
  Notemos que hemos interpolado la ruta de la imagen.
  Gracias a los estilos en linea podemos embeber variables como en este caso pudimos incluir a los circulos.
  Ahora como podemos enviarle diferentes propiedades a un componente?
  Pues en nuestro archivo index.js como ya hemos hablado en el capitulo 5 de ReactDOM y la propiedad render pues aqui el elemento que vamos a renderear es la Card, pero no solo eso, si no que tambien vamos a indicar las propiedades que vamos a asignar a dicho componente:
    ReactDOM.render(<Card
                  title="Guias Practicas"
                  description="Aprende las practicas fundamentales del discipulo"
                  img="https://firebasestorage.googleapis.com/v0/b/discipulados-react.appspot.com/o/icon_church_128px.png?alt=media&token=8cf27fb0-066a-4d4e-b95d-b2a48f52e50f"
                  leftColor="#A74CF2"
                  rightcolor="#617BFB"
                />, container)
  Como vemos nos hemos traido la informacion de Card.js y en breve debemos enviar esta informacion a nuestro componente. Con ayuda de la propiedad "props" lo hacemos en nuestro Card.js:
    <div className="card mx-auto Discipulos-Card" 
      style={{ 
        backgroundImage: `url(${circlesImg}), linear-gradient(to right, ${this.props.leftColor}, ${this.props.rightColor})`,

       }} 
      >
        <div className="card-body" >
          <div className="row center">
            <div className="col-6">
              <img src={this.props.img} className="float-right" id="Discipulos-img" />
            </div>
            <div className="col-6 Discipulos-Card-Info" >
              <h1>{this.props.title}</h1>
              <p>{this.props.description} </p>
            </div>
          </div>
        </div>
      </div>
  Hemos interpolado las propiedades desde nuestro render en index.js.
  Pero hay una manera mas eficiente de hacerlo, y es la siguiente:
  Pues con ES6 lo podemos hacer mas sencillo con el 'destructring' de las propiedades de un objeto. Como podemos hacerlo? Pues creamos una constante que contiene cada una de las propiedades de props, como sigue:
    const { title, description, img, leftColor, rightColor } = this.props
  Ahora para interpolarlos solo usamos el nombre que corresponde a su constante:
    return (
      <div className="card mx-auto Discipulos-Card" 
      style={{ 
        backgroundImage: `url(${circlesImg}), linear-gradient(to right, ${leftColor}, ${rightColor})`,

       }} 
      >
        <div className="card-body" >
          <div className="row center">
            <div className="col-6">
              <img src={img} className="float-right" id="Discipulos-img" />
            </div>
            <div className="col-6 Discipulos-Card-Info" >
              <h1>{title}</h1>
              <p>{description} </p>
            </div>
          </div>
        </div>
      </div>
    );
12. El State 
  Exiten dos tipos de datos que controlan un componente:
    Las props y 
    El State
  Las props son establecidas por el padre y son fijas durante toda la vida de un componente.
  Para la parte de los datos que van a cambiar hay que usar el State
  Al igual que las props el State contiene informacion sobre el componente sin embargo el tipo de informacion y como se maneja es diferente. Inicia con un valor cuando se monta el componente y va cambiando a lo largo del tiempo. Esto en su mayoria generado por eventos del usuario.
  El primer paso para trabajar con States es importante definir Componentes de Clase como ya hicimos con el Card. 
  Lo siguiente es definir un constructor dentro de dicha clase:
    constructor(props){
    super(props)
    this.state = {
      image: 'https://firebasestorage.googleapis.com/v0/b/discipulados-react.appspot.com/o/perro_sf.png?alt=media&token=bc64cec4-05b9-4b87-89b8-297ac7b43b6a'
    }
  Como vemos definimos un valor predeterminado pues este es el valor que tendra al principio nuestro State. Aqui hemos definido una imagen para el estado inicial del componente. Por ello la propiedad que estabamos usando era de props llamado "img". Ahora o sustituiremos por el dato que esta en el State.
    <img src={this.state.image} className="float-right" id="Discipulos-img" />
  Ya con esto tenemos un estado inicial, y esto va a cambiar con eventos del usuario. Por el momento no vamos a ver como capturar eventos de un usuario pero vamos a simularlo con:
    componentDidMount()
  Esto no es mas que una funcion que se ejecuta apenas el componente es montado. Esto forma parte de vida de un componente que veremos mas adelante:
    componentDidMount( ){
      setTimeout(() => {
        this.setState({
          image: 'https://firebasestorage.googleapis.com/v0/b/discipulados-react.appspot.com/o/mariposa%20copy.png?alt=media&token=c9d15a6b-559d-4940-8d5a-8f9f27beddc5'
        })
      }, 5000)
    }
  Con esta funcion luego de 5 segundos se cambiara el State de la imagen cambiandola por otra al momento.
